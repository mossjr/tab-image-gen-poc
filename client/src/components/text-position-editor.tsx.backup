import { useState, useEffect, useCallback } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { Settings, Save, RotateCcw } from "lucide-react";
import { type TextConfig, type TextPositionConfig } from "@shared/schema";

const fieldNames = {
  raceName: "Race Name",
  prizeAmount: "Prize Amount", 
  projectedPool: "Projected Pool",
  day: "Day",
  numberOfRaces: "Number of Races"
} as const;

const fontOptions = [
  { value: "Montserrat-Bold", label: "Montserrat Bold" },
  { value: "Montserrat-BoldItalic", label: "Montserrat Bold Italic" },
  { value: "Montserrat-Black", label: "Montserrat Black" },
  { value: "Montserrat-Regular", label: "Montserrat Regular" },
];

const singleFieldSchema = z.object({
  bottom: z.number().min(0).max(1080),
  position: z.number().min(0).max(1920),
  alignment: z.enum(["left", "center"]),
  fontFamily: z.string(),
  fontSize: z.number().min(8).max(300),
  color: z.string().regex(/^#[0-9a-fA-F]{6}$/),
});

type SingleFieldData = z.infer<typeof singleFieldSchema>;

interface TextPositionEditorProps {
  config: TextConfig;
  onConfigChange: (config: TextConfig) => void;
  onSave: (config: TextConfig) => void;
}

type FieldName = keyof TextConfig;

export function TextPositionEditor({ config, onConfigChange, onSave }: TextPositionEditorProps) {
  const [activeField, setActiveField] = useState<FieldName>("raceName");
  const [localConfig, setLocalConfig] = useState<TextConfig>(config);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  const currentFieldConfig = localConfig[activeField];
  
  const form = useForm<SingleFieldData>({
    resolver: zodResolver(singleFieldSchema),
    defaultValues: {
      bottom: currentFieldConfig.bottom,
      position: currentFieldConfig.alignment === "center" ? currentFieldConfig.center || 0 : currentFieldConfig.left || 0,
      alignment: currentFieldConfig.alignment,
      fontFamily: currentFieldConfig.fontFamily,
      fontSize: currentFieldConfig.fontSize,
      color: currentFieldConfig.color,
    },
  });

  // Update local config when prop changes
  useEffect(() => {
    setLocalConfig(config);
    setHasUnsavedChanges(false);
  }, [config]);

  // Update form values when active field changes
  useEffect(() => {
    const fieldConfig = localConfig[activeField];
    form.reset({
      bottom: fieldConfig.bottom,
      position: fieldConfig.alignment === "center" ? fieldConfig.center || 0 : fieldConfig.left || 0,
      alignment: fieldConfig.alignment,
      fontFamily: fieldConfig.fontFamily,
      fontSize: fieldConfig.fontSize,
      color: fieldConfig.color,
    });
  }, [activeField, localConfig, form]);

  // Handle individual field changes
  const handleFieldChange = useCallback((field: keyof SingleFieldData, value: any) => {
    form.setValue(field, value);
    
    const currentValues = form.getValues();
    currentValues[field] = value; // Make sure the new value is included
    
    const updatedFieldConfig: TextPositionConfig = {
      bottom: currentValues.bottom,
      alignment: currentValues.alignment,
      fontFamily: currentValues.fontFamily,
      fontSize: currentValues.fontSize,
      color: currentValues.color,
      ...(currentValues.alignment === "center" 
        ? { center: currentValues.position } 
        : { left: currentValues.position }
      ),
    };

    const newConfig = {
      ...localConfig,
      [activeField]: updatedFieldConfig,
    };

    setLocalConfig(newConfig);
    setHasUnsavedChanges(true);
    onConfigChange(newConfig); // Immediate preview update only
  }, [form, localConfig, activeField, onConfigChange]);

  const handleSave = () => {
    onSave(localConfig);
    setHasUnsavedChanges(false);
  };

  const resetToDefaults = () => {
    const defaultConfig: TextConfig = {
      raceName: {
        bottom: 200,
        left: 100,
        alignment: "left",
        fontFamily: "Montserrat-BoldItalic",
        fontSize: 60,
        color: "#1fd87b"
      },
      prizeAmount: {
        bottom: 600,
        left: 200,
        alignment: "left",
        fontFamily: "Montserrat-Black",
        fontSize: 120,
        color: "#ffffff"
      },
      projectedPool: {
        bottom: 700,
        left: 540,
        alignment: "left",
        fontFamily: "Montserrat-BoldItalic",
        fontSize: 48,
        color: "#1fd87b"
      },
      day: {
        bottom: 800,
        left: 700,
        alignment: "left",
        fontFamily: "Montserrat-BoldItalic",
        fontSize: 48,
        color: "#1fd87b"
      },
      numberOfRaces: {
        bottom: 200,
        left: 1600,
        alignment: "left",
        fontFamily: "Montserrat-BoldItalic",
        fontSize: 48,
        color: "#ffffff"
      }
    };
    
    setLocalConfig(defaultConfig);
    onConfigChange(defaultConfig);
    onSave(defaultConfig);
    setHasUnsavedChanges(false);
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Settings className="h-5 w-5 text-primary" />
            <CardTitle>Text Positioning</CardTitle>
          </div>
          <div className="flex items-center space-x-2">
            {hasUnsavedChanges && (
              <Button
                onClick={handleSave}
                size="sm"
                data-testid="button-save-positions"
              >
                <Save className="h-4 w-4 mr-2" />
                Save Changes
              </Button>
            )}
            <Button
              variant="outline"
              size="sm"
              onClick={resetToDefaults}
              data-testid="button-reset-defaults"
            >
              <RotateCcw className="h-4 w-4 mr-2" />
              Reset
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {/* Field Selector */}
          <div className="space-y-2">
            <Label>Select Text Field to Edit</Label>
            <Tabs value={activeField} onValueChange={(value) => setActiveField(value as FieldName)}>
              <TabsList className="grid w-full grid-cols-5">
                {Object.entries(fieldNames).map(([key, label]) => (
                  <TabsTrigger key={key} value={key} className="text-xs">
                    {label}
                  </TabsTrigger>
                ))}
              </TabsList>
            </Tabs>
          </div>

          <Separator />

          {/* Position Controls */}
          <div className="space-y-4">
            <h4 className="text-sm font-medium text-foreground">Position</h4>
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="position">
                  {form.watch("alignment") === "center" ? "Center X" : "Left X"} Position
                </Label>
                <Input
                  id="position"
                  data-testid="input-position"
                  type="number"
                  min="0"
                  max="1920"
                  value={form.watch("position")}
                  onChange={(e) => handleFieldChange("position", parseInt(e.target.value) || 0)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="bottom">Bottom Position</Label>
                <Input
                  id="bottom"
                  data-testid="input-bottom"
                  type="number"
                  min="0"
                  max="1080"
                  value={form.watch("bottom")}
                  onChange={(e) => handleFieldChange("bottom", parseInt(e.target.value) || 0)}
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <Label>Text Alignment</Label>
              <Select 
                value={form.watch("alignment")} 
                onValueChange={(value) => handleFieldChange("alignment", value as "left" | "center")}
              >
                <SelectTrigger data-testid="select-alignment">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="left">Left Aligned</SelectItem>
                  <SelectItem value="center">Center Aligned</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <Separator />

          {/* Font Controls */}
          <div className="space-y-4">
            <h4 className="text-sm font-medium text-foreground">Font Style</h4>
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label>Font Family</Label>
                <Select 
                  value={form.watch("fontFamily")} 
                  onValueChange={(value) => handleFieldChange("fontFamily", value)}
                >
                  <SelectTrigger data-testid="select-font-family">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {fontOptions.map((font) => (
                      <SelectItem key={font.value} value={font.value}>
                        {font.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="fontSize">Font Size</Label>
                <Input
                  id="fontSize"
                  data-testid="input-font-size"
                  type="number"
                  min="8"
                  max="300"
                  value={form.watch("fontSize")}
                  onChange={(e) => handleFieldChange("fontSize", parseInt(e.target.value) || 12)}
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="color">Text Color</Label>
              <div className="flex space-x-2">
                <Input
                  id="color"
                  data-testid="input-color"
                  type="color"
                  value={form.watch("color")}
                  onChange={(e) => handleFieldChange("color", e.target.value)}
                  className="w-16 h-10 p-1 border rounded"
                />
                <Input
                  type="text"
                  value={form.watch("color")}
                  onChange={(e) => handleFieldChange("color", e.target.value)}
                  placeholder="#ffffff"
                  className="flex-1"
                />
              </div>
            </div>
          </div>

          <Separator />

          {/* Preview Info */}
          <div className="space-y-2">
            <h4 className="text-sm font-medium text-foreground">Current Settings</h4>
            <div className="text-xs text-muted-foreground space-y-1">
              <div>Field: {fieldNames[activeField]}</div>
              <div>Position: {form.watch("alignment") === "center" ? "Center" : "Left"} {form.watch("position")}px, Bottom {form.watch("bottom")}px</div>
              <div>Font: {form.watch("fontFamily")} {form.watch("fontSize")}px</div>
              <div>Color: {form.watch("color")}</div>
              {hasUnsavedChanges && (
                <div className="text-amber-600 font-medium">⚠ Unsaved changes</div>
              )}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}